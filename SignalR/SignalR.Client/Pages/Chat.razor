@page "/chat"
@using Microsoft.AspNetCore.SignalR.Client
@using SignalR
@inject NavigationManager Navigation
@implements IAsyncDisposable
@rendermode InteractiveAuto

<PageTitle>Chat</PageTitle>
Số người tham gia : @clientscount


<div class="card">
    <div class="card-header">Global Chat</div>
    <div card="card-body mt-2">
            @foreach (var message in messages)
            {
                <div class="container">
                    <div class="border-1 rounded-5 mb-3 mt-3 rounded border p-3 shadow-sm">
                        <p>@message</p>
                    </div>
                </div>
            }
    </div>
</div>

<div class="form-group">
    <label class="form-label">
        User:
        <input @bind="userInput" class="form-control"/>
    </label>
</div>
<div class="form-group">
    <label class="form-label">
        Message:
        <input @bind="messageInput" size="50" class="form-control"/>
    </label>
</div>
<button class="btn btn-outline-primary" @onclick="Send" disabled="@(!IsConnected)">Send</button>

@code {
    private HubConnection? hubConnection;
    private List<string> messages = [];
    private string? userInput;
    private string? messageInput;
    private int? clientscount;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message} - {DateTime.Now.ToShortTimeString().ToString()}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });        

        hubConnection.On<int>("ShowClients", (Clientscount) =>
        {
            clientscount = Clientscount;
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessageABC", userInput, messageInput);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("DisconnectClient");
            await hubConnection.DisposeAsync();
        }
    }
}